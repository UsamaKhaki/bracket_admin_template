(function($){

    $.fn.commonValidator = function(params) {
        var $thisCommonValidator = this;

        var opt = $.extend({
            // AJAX Params
            ajax: true,
            data: function (form) {
                return new FormData(form);
            },
            onValidationError: null,
            onSuccess: null,
            beforeAjaxSend: function () {
                checkLoadingOverlay('show', $thisCommonValidator);
            },
            successLoader: function () {
                checkLoadingOverlay('hide', $thisCommonValidator);
            },
            hideLoader: null,
            redirectTo: null,
            reload: false,
            modalId: null,
            tableName: null,

            // Validator Params
            ignore: '',
            rules: {},
            selectorVariable: '_validator',
            errorType: "label",

            // Js Confirm Params
            jsConfirm: true,

            // Loading Overlay Params
            loadingOverlay: true,
            loaderSize: 50,
            onServerError: function (response){

            },

        }, params);


        var consoleError = function (msg){
            console.error(msg);
            return false;
        }

        if(opt.ajax && !opt.redirectTo && !opt.reload && !opt.modalId){
            if(!opt.onSuccess){
                return consoleError('Redirect Param is required')
            }
        }

        var returnToFunction = function (name, response){
            if(typeof eval('opt.'+name) == "function"){
                eval('opt.'+name)(response);
            }else{
                return consoleError(name+' should be function');
            }
        }

        var checkLoadingOverlay = function (play, form){
            if(opt.loadingOverlay){
                $zIndex = 10;
                if($(form).closest('.modal').length){
                    $zIndex = 10000;
                }
                $thisCommonValidator.LoadingOverlay(play, {zIndex: $zIndex, maxSize: opt.loaderSize});
            }
            if(opt.hideLoader){
                if(typeof opt.hideLoader == "function"){
                    opt.hideLoader();
                }else{
                    console.error('hideLoader must be a function')
                    return false;
                }
            }
        }

        var showErrorMessage = function (content, title){
            if(opt.jsConfirm){
                $.confirm({
                    type: 'red',
                    title: title,
                    content: content,
                    buttons: {
                        confirm: {
                            text: "OK",
                            btnClass: "btn-red",
                            action: function () {

                            }
                        }
                    },
                })
            }else{
                alert(title)
            }
        }

        let selector = eval(opt.selectorVariable);

        if(!['function', 'object', 'array'].includes(typeof opt.data)){
            return consoleError('Data param is not valid, only support function, array or object.')
        }

        $fOption = {
            ignore: opt.ignore,
            submitHandler: function (form) {
                if(opt.ajax){
                    $ajaxOption = {
                        url: $(form).attr('action'),
                        method: "POST",
                        beforeSend: opt.beforeAjaxSend,
                        success: function (response) {
                            opt.successLoader();
                            if(response.status == "Validation-Errors"){
                                if(opt.onValidationError){
                                    returnToFunction('onValidationError', response);
                                }else{
                                    jsonError = [];
                                    $.each(response.errors,function (ii, ele) {
                                        $.each(ele,function (iii, elee) {
                                            jsonError[ii] = elee;
                                        });
                                    })
                                    selector.showErrors(jsonError);
                                }
                            }else if(response.status == "Success"){
                                if(opt.onSuccess){
                                    returnToFunction('onSuccess', response)
                                }else{
                                    if(opt.jsConfirm){
                                        $.confirm({
                                            title: 'Success',
                                            content: response.html,
                                            buttons: {
                                                ok: {
                                                    text: "OK",
                                                    btnClass: "btn-green",
                                                    action: function () {
                                                        if(opt.modalId){
                                                            $(opt.modalId).modal('hide');
                                                            if(opt.tableName){
                                                                eval(opt.tableName).draw();
                                                            }
                                                        }else{
                                                            if(opt.reload){
                                                                location.reload();
                                                            }else{
                                                                window.location.href = opt.redirectTo;
                                                            }
                                                        }
                                                    }
                                                },
                                            }
                                        })
                                    }else{
                                        alert(response.html)
                                        window.location.href = opt.redirectTo;
                                    }
                                }
                            }
                            else{
                                showErrorMessage(response.html, 'Error!');
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError){
                            checkLoadingOverlay('hide', $thisCommonValidator);
                            returnToFunction('onServerError', {details: {xhr, ajaxOptions, thrownError}})
                            showErrorMessage('Error Code: '+xhr.status+'. '+thrownError+'. Please contact Admin.', 'ERROR !!');
                        }
                    };
                    if(typeof opt.data == 'function'){
                        $ajaxOption['data'] = opt.data(form);
                        $ajaxOption['processData'] = false;
                        $ajaxOption['contentType'] = false;
                    }else{
                        $ajaxOption['data'] = opt.data;
                    }

                    $.ajax($ajaxOption)

                }else{
                    form.submit();
                }
            },
            rules: opt.rules,
        };

        if(opt.errorType === 'label'){
            $fOption['errorPlacement'] = function (error, element) {
                if (element.parent('.input-group').length) {
                    error.insertAfter(element.parent());
                } else if (element.data('select2')) {
                    if(element.parent('td').length){
                        element.parent('td').append(error);
                    }else if(element.parent().hasClass('form-group')){
                        element.parent('.form-group').append(error);
                    }
                }else{
                    error.insertAfter(element);
                }
            };
        }else if(opt.errorType === 'tooltip'){
            $fOption['showErrors'] = function(errorMap, errorList) {
                $.each(this.successList, function(index, value) {
                    var $this = $(value);
                    var formGroup = $this.closest(".form-group");
                    formGroup.removeClass("has-error").addClass("has-success");
                    if($this.hasClass("select2-hidden-accessible")){
                        $this = formGroup.find(".select2");
                    }
                    if($this.attr('type') == "hidden" || $(value).parent('.file-container').length){
                        $this = formGroup;
                    }
                    formGroup.removeClass('has-success')
                    return $this.tooltip("dispose");
                });
                return $.each(errorList, function(index, value) {
                    var $this = $(value.element);
                    var formGroup = $this.closest(".form-group");

                    if($this.attr('type') == "hidden" || $(value.element).parent('.file-container').length){
                        $this = formGroup;
                    }

                    if($this.hasClass("select2-hidden-accessible")){
                        $this = formGroup.find(".select2");
                    }

                    if(!formGroup.hasClass("has-error")){
                        formGroup.removeClass("has-success").addClass("has-error")
                    }

                    $this.attr("data-toggle","tooltip").attr("title",value.message);
                    return $this.tooltip('_fixTitle').tooltip();

                });
            }
        }else{
            consoleError('"label" & "tooltip" are the only values allowed for errorType param');
            return false;
        }

        selector = this.validate($fOption);

        return this;

    }
})(jQuery);
